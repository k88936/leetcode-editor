plugins {
    id 'java-library'
    id 'org.jetbrains.intellij.platform' version '2.7.1'
    id("org.jetbrains.kotlin.jvm") version "2.2.0"
    id 'org.jetbrains.changelog' version "1.3.1"
    id "de.undercouch.download" version "4.0.2"
}

apply plugin: 'org.jetbrains.changelog'

group project.pluginGroup
version (System.getenv('LD_VERSION')==null ? project.pluginVersion :System.getenv('LD_VERSION'))
kotlin {
    jvmToolchain(17)
}
java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

repositories {
    mavenLocal()
    maven { url 'https://jitpack.io' }
    mavenCentral()
    
    intellijPlatform {
        defaultRepositories()
    }
}

dependencies {
    implementation 'com.shuzijun:lc-sdk:0.0.3'
    implementation 'com.alibaba:fastjson:1.2.47'
    implementation 'org.jsoup:jsoup:1.11.3'
    implementation('io.sentry:sentry:1.7.9') {
        exclude module: 'slf4j-api'
    }
    implementation 'org.scilab.forge:jlatexmath:1.0.7'
    implementation 'org.apache.commons:commons-lang3:3.9'
    implementation 'com.vladsch.flexmark:flexmark:0.62.2'
    implementation 'com.vladsch.flexmark:flexmark-ext-attributes:0.62.2'
    implementation 'io.github.biezhi:TinyPinyin:2.0.3.RELEASE'
    
    intellijPlatform {
        create(providers.gradleProperty('platformType'), providers.gradleProperty('platformVersion'))
        bundledPlugin('com.intellij.java')
        pluginVerifier()
        zipSigner()
    }
}

// See https://plugins.jetbrains.com/docs/intellij/tools-intellij-platform-gradle-plugin.html
intellijPlatform {
    pluginConfiguration {
        name = project.pluginName
        version = project.pluginVersion
        
        ideaVersion {
            sinceBuild = project.pluginSinceBuild
            untilBuild = project.pluginUntilBuild
        }
        
        description = new File(project.pluginDescription).getText('UTF-8')
    }
    
    signing {
        certificateChain = System.getenv("CERTIFICATE_CHAIN")
        privateKey = System.getenv("PRIVATE_KEY")
        password = System.getenv("PRIVATE_KEY_PASSWORD")
    }
    
    publishing {
        token = System.getenv("PUBLISH_TOKEN")
        channels = ["default"]
    }
    
    pluginVerification {
        ides {
            recommended()
        }
    }
    
    buildSearchableOptions = false
}

changelog {
    version = project.pluginVersion
    groups = []
}

intellijPlatformTesting {
    runIde {
        register("runIdeTest") {
            task {
                jvmArgs = project.runIdeJvmArgs.split(',').toList()
            }
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}